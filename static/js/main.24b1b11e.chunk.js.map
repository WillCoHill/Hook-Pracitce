{"version":3,"sources":["components/counter.js","components/FriendStatus.js","components/randomnum.js","components/textbox.js","App.js","reportWebVitals.js","index.js"],"names":["Example","useState","count","setCount","useEffect","document","title","onClick","FriendStatus","firstName","setFirstName","lastName","setLastName","value","onChange","e","target","ArrayDepMount","randomNumber","setRandomNumber","effectLogs","setEffectLogs","prevEffectLogs","Math","floor","random","map","effect","index","repeat","TextBox","textAreaEl","useRef","stringVal","style","textAlign","current","focus","htmlFor","display","background","margin","padding","color","ref","id","rows","cols","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"kOAEe,SAASA,IAAW,IAAD,EACJC,mBAAS,GADL,mBACvBC,EADuB,KAChBC,EADgB,KAQ9B,OAJAC,qBAAU,WACRC,SAASC,MAAT,sBAAgCJ,EAAhC,aAIA,gCACE,6CAAgBA,EAAhB,YACA,wBAAQK,QAAS,kBAAMJ,EAASD,EAAQ,IAAxC,yBCZO,SAASM,IAAgB,IAAD,EAEHP,mBAAS,WAFN,mBAE9BQ,EAF8B,KAEnBC,EAFmB,OAGLT,mBAAS,QAHJ,mBAG9BU,EAH8B,KAGpBC,EAHoB,KAQrC,OACE,gCACE,uBAAOC,MAAOJ,EAAWK,SALC,SAACC,GAAD,OAAOL,EAAaK,EAAEC,OAAOH,UAKK,uBAC5D,uBAAOA,MAAOF,EAAUG,SALC,SAACC,GAAD,OAAOH,EAAYG,EAAEC,OAAOH,UAMrD,wCACS,iCAAOJ,EAAP,IAAmBE,W,WCZnB,SAASM,IAAiB,IAAD,EACIhB,mBAAS,GADb,mBAC7BiB,EAD6B,KACfC,EADe,OAEAlB,mBAAS,IAFT,mBAE7BmB,EAF6B,KAEjBC,EAFiB,KAWpC,OAPAjB,qBACE,WACEiB,GAAc,SAAAC,GAAc,4BAAQA,GAAR,CAAwB,oCAEtD,IAIA,gCACE,6BAAKJ,IACL,wBACEX,QAAS,WACPY,EAAgBI,KAAKC,MAAsB,IAAhBD,KAAKE,YAFpC,qCAOA,8BACGL,EAAWM,KAAI,SAACC,EAAQC,GAAT,OACd,8BAAkB,eAAKC,OAAOD,GAASD,GAA7BC,WCvBP,SAASE,IACpB,IAAMC,EAAaC,iBAAO,MACpBC,EAAYD,iBAAO,kDAMzB,OACE,0BAASE,MAAO,CAAEC,UAAW,UAA7B,UACE,8BACE,wBAAQ5B,QARS,WACrBwB,EAAWK,QAAQvB,MACnBoB,EAAUG,QAAU,+GACpBL,EAAWK,QAAQC,SAKf,6CAEF,uBACEC,QAAQ,QACRJ,MAAO,CACLK,QAAS,QACTC,WAAY,UACZC,OAAQ,MACRC,QAAS,MACTC,MAAO,SAPX,+EAYA,0BAAUC,IAAKb,EAAYc,GAAG,QAAQC,KAAK,IAAIC,KAAK,UCF7CC,MAnBf,WACE,OACE,sBAAKC,UAAU,MAAf,UACE,wBAAQA,UAAU,aAAlB,SACE,wDAIF,cAAC,EAAD,IACA,uBACA,cAACzC,EAAD,IACA,uBACA,cAACS,EAAD,IACA,uBACA,cAACa,EAAD,QCRSoB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFxD,SAASyD,eAAe,SAM1BZ,M","file":"static/js/main.24b1b11e.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nexport default function Example() {\r\n    const [count, setCount] = useState(0);\r\n  \r\n    // Similar to componentDidMount and componentDidUpdate:\r\n    useEffect(() => {\r\n      document.title = `You clicked ${count} times`;\r\n    });\r\n  \r\n    return (\r\n      <div>\r\n        <p>You clicked {count} times</p>\r\n        <button onClick={() => setCount(count + 1)}>\r\n          Click me\r\n        </button>\r\n      </div>\r\n    );\r\n  }","import React, { useState } from 'react';\r\nexport default function FriendStatus() {\r\n  \r\n  const [firstName, setFirstName] = useState(\"William\");\r\n  const [lastName, setLastName] = useState(\"Hill\");;\r\n\r\n  const handleFirstNameChange = (e) => setFirstName(e.target.value);\r\n  const handleLastNameChange = (e) => setLastName(e.target.value);\r\n\r\n  return (\r\n    <div>\r\n      <input value={firstName} onChange={handleFirstNameChange} /><br />\r\n      <input value={lastName} onChange={handleLastNameChange} />\r\n      <p>\r\n        Hello, <span>{firstName} {lastName}</span>\r\n      </p>\r\n    </div>\r\n  );\r\n}","import React, { useState, useEffect } from 'react';\r\n\r\nexport default function ArrayDepMount() {\r\n    const [randomNumber, setRandomNumber] = useState(0)\r\n    const [effectLogs, setEffectLogs] = useState([])\r\n  \r\n    useEffect(\r\n      () => {\r\n        setEffectLogs(prevEffectLogs => [...prevEffectLogs, 'effect fn has been invoked'])\r\n      },\r\n      []\r\n    )\r\n  \r\n    return (\r\n      <div>\r\n        <h1>{randomNumber}</h1>\r\n        <button\r\n          onClick={() => {\r\n            setRandomNumber(Math.floor(Math.random() * 101))\r\n          }}\r\n        >\r\n          Generate random number!\r\n        </button>\r\n        <div>\r\n          {effectLogs.map((effect, index) => (\r\n            <div key={index}>{'üçî'.repeat(index) + effect}</div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    )\r\n  }","import React, { useRef } from 'react';\r\n\r\nexport default function TextBox() {\r\n    const textAreaEl = useRef(null);\r\n    const stringVal = useRef(\"This is a string saved via the ref object --- \")\r\n    const handleBtnClick = () => {\r\n      textAreaEl.current.value =\r\n      stringVal.current + \"This is the text populating the text box area. Every time you press the button it will default back to this!\";\r\n      textAreaEl.current.focus();\r\n    };\r\n    return (\r\n      <section style={{ textAlign: \"center\" }}>\r\n        <div>\r\n          <button onClick={handleBtnClick}>Focus and Populate Text Field</button>\r\n        </div>\r\n        <label\r\n          htmlFor=\"story\"\r\n          style={{\r\n            display: \"block\",\r\n            background: \"#8B008B\",\r\n            margin: \"1em\",\r\n            padding: \"1em\",\r\n            color: \"white\"\r\n          }}\r\n        >\r\n          Prepare to see text from the ref object here. Click button above.\r\n        </label>\r\n        <textarea ref={textAreaEl} id=\"story\" rows=\"5\" cols=\"33\" />\r\n      </section>\r\n    );\r\n  };","import './App.css';\nimport Counter from './components/counter';\nimport FriendStatus from './components/FriendStatus';\nimport ArrayDepMount from './components/randomnum';\nimport TextBox from './components/textbox';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>\n          React Hooks Practice\n        </h1>\n      </header>\n      <Counter />\n      <hr />\n      <FriendStatus />\n      <hr />\n      <ArrayDepMount />\n      <hr />\n      <TextBox />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}